:root {
  --max-width: 80%;
  --padding-container: 20px;
  --header-height: 110px;
  --container-width: max(calc((100% - var(--max-width)) / 2), var(--padding-container));
  /* Any top fixed elements should update the value of scroll offset variable and set it on the html element*/
  --page-scroll-top-offset: calc(var(--header-height) + 15px);
}

@media screen and (max-width: 768px) {
  :root {
    --max-width: 100%;
  }
}

* {
  box-sizing: border-box;
}

html,
body,
div,
span,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
button,
img,
small,
strong,
sub,
sup,
tt,
b,
u,
i,
dl,
dt,
dd,
ol,
ul,
li,
label,
legend,
caption {
  vertical-align: baseline;
}

html {
  --page-scroll-top-offset: var(--header-height); /* Any top fixed elements should update the value of this variable */

  font-size: 100%;
  scroll-behavior: smooth;
  scroll-padding-top: var(--page-scroll-top-offset);
}

html,
body {
  min-width: 100%;
  min-height: 100%;
  margin: 0;
  padding: 0;
}

body {
  display: none;
  background: var(--background, #fff);
  padding: 0;
  margin: 0;
  width: 100%;
}

body.no-scroll {
  block-size: 100vh;
  overflow: hidden;
  position: relative;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

/* avoid font most swaps  */
body,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--p-font-family, system-ui);
}

body > * {
  color: var(--text, #000);
  font-family: var(--p-font-family, system-ui);
  font-size: var(--p-font-size, 1rem);
  font-weight: var(--p-font-weight, normal);
  font-style: var(--p-font-style, normal);
  line-height: var(--p-line-height, 1.2);
}

header {
  min-height: var(--header-height, 64px);
  display: grid;
  background: var(--header-background, #fff);
}

head:has(meta[name='header'][content='false' i]) + body > header,
head:has(meta[name='footer'][content='false' i]) + body > footer {
  display: none;
}

main {
  background: var(--background, #fff);
  padding: 0;
  margin: 0;
  width: 100%;
  position: relative;
  min-height: 100%;
}

a {
  align-items: center;
  color: var(--highlight, inherit);
  text-decoration: none;
  font-family: var(--a-font-family, system-ui);
  font-size: var(--a-font-size, 1rem);
  font-weight: var(--a-font-weight, normal);
  font-style: var(--a-font-style, normal);
  line-height: var(--a-line-height, 1.2);
}

:is(h1, h2, h3, h4, h5, h6) a {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  font-style: inherit;
  line-height: inherit;
}

a:hover {
  color: var(--text, inherit);
}

h1,
h2,
h3,
h4 {
  color: var(--title, #000);
}

h1 {
  font-family: var(--h1-font-family, system-ui);
  font-size: var(--h1-font-size, 1rem);
  font-weight: var(--h1-font-weight, normal);
  font-style: var(--h1-font-style, normal);
  line-height: var(--h1-line-height, 1.2);
}

h2 {
  font-family: var(--h2-font-family, system-ui);
  font-size: var(--h2-font-size, 1rem);
  font-weight: var(--h2-font-weight, normal);
  font-style: var(--h2-font-style, normal);
  line-height: var(--h2-line-height, 1.2);
}

h3 {
  font-family: var(--h3-font-family, system-ui);
  font-size: var(--h3-font-size, 1rem);
  font-weight: var(--h3-font-weight, normal);
  font-style: var(--h3-font-style, normal);
  line-height: var(--h3-line-height, 1.3);
}

h4 {
  font-family: var(--h4-font-family, system-ui);
  font-size: var(--h4-font-size, 1rem);
  font-weight: var(--h4-font-weight, normal);
  font-style: var(--h4-font-style, normal);
  line-height: var(--h4-line-height, 1.4);
}

h5 {
  font-family: var(--h5-font-family, system-ui);
  font-size: var(--h5-font-size, 1rem);
  font-weight: var(--h5-font-weight, normal);
  font-style: var(--h5-font-style, normal);
  line-height: var(--h5-line-height, 1.5);
}

h6 {
  font-family: var(--h6-font-family, system-ui);
  font-size: var(--h6-font-size, 1rem);
  font-weight: var(--h6-font-weight, normal);
  font-style: var(--h6-font-style, normal);
  line-height: var(--h6-line-height, 1.6);
}

label {
  font-family: var(--label-font-family, system-ui);
  font-size: var(--label-font-size, 1rem);
  font-weight: var(--label-font-weight, normal);
  font-style: var(--label-font-style, normal);
  line-height: var(--label-line-height, 1.6);
}

button {
  border: none;
  appearance: none;
  background-color: transparent;
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  font-family: var(--button-font-family, system-ui);
  font-size: var(--button-font-size, 1rem);
  font-weight: var(--button-font-weight, normal);
  font-style: var(--button-font-style, normal);
  line-height: var(--button-line-height, 1.2);
}

img {
  width: 100%;
  object-fit: cover;
}

picture,
img {
  display: block;
  max-width: 100%;
  height: auto;
}

/* Set default block style to all raqn web components 
   Use :where() to give lower specificity in order to not overwrite any styles set on the web component tag 
*/
:where([raqnwebcomponent]) {
  display: block;

  /* Add defaults to initial to prevent inheritance */
  --margin-block-start: initial;
  --margin-block-end: initial;
  --margin-inline-start: initial;
  --margin-inline-end: initial;
  --padding-block-start: initial;
  --padding-block-end: initial;
  --padding-inline-start: initial;
  --padding-inline-end: initial;

  margin-block-start: var(--margin-block-start);
  margin-block-end: var(--margin-block-end);
  margin-inline-start: var(--margin-inline-start);
  margin-inline-end: var(--margin-inline-end);
  padding-block-start: var(--padding-block-start);
  padding-block-end: var(--padding-block-end);
  padding-inline-start: var(--padding-inline-start);
  padding-inline-end: var(--padding-inline-end);
}

/* Container: make all content act as a container where background of the container is limited to the content area */
main > div > *:not(.full-width) {
  margin-inline: var(--container-width);
}

:where(main, raqn-header, raqn-footer) > raqn-section > *:not(.full-width) {
  margin-inline: var(--container-width);
  width: initial;
}

/* Change the above behavior by setting the full-with class on the block. This will make the background take the full width of the page */
.full-width {
  max-width: var(--max-width);
  margin-inline: auto;
}

/* Hide raqn web components based on different states */
[isloading]:not(.show-loader),
.hide-with-error,
.hide {
  content-visibility: hidden
}

#franklin-svg-sprite {
  display: none;
}

.show-loader {
  position: relative;
  min-height: 100px;

  &::before {
    content: '';
    position: absolute;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: white;
  }

  &::after {
    content: '';
    position: absolute;
    left: 50%;
    transform-origin: center;
    z-index: 2;
    border: 5px solid #f3f3f3; /* Light grey */
    border-top: 5px solid #555; /* Blue */
    border-radius: 50%;
    width: 25px;
    height: 25px;
    animation: spin 0.75s linear infinite;
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}
